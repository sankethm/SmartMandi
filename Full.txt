import React, { createContext, useState, useContext, useEffect } from 'react';

// 1. Create the Context
const AuthContext = createContext();

// 2. Create a Provider Component
export const AuthProvider = ({ children }) => {
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [userRole, setUserRole] = useState(null); // 'Farmer' or 'Vendor'
  const [userInfo, setUserInfo] = useState(null);

  // Simulate loading auth state from local storage or session on first load
  useEffect(() => {
    // In a real app, you'd check a token or session here
    console.log("AuthContext initialized.");
  }, []);

  // Simulated Login Function
  const login = (role, email) => {
    setIsLoggedIn(true);
    setUserRole(role);
    setUserInfo({ 
        email, 
        name: role === 'Farmer' ? 'Sanket Hiremath' : 'Vishw Vora',
        id: role === 'Farmer' ? 'FM401' : 'VEN105'
    });
    console.log(`User logged in as ${role}: ${email}`);
  };

  // Simulated Logout Function
  const logout = () => {
    setIsLoggedIn(false);
    setUserRole(null);
    setUserInfo(null);
    console.log('User logged out.');
  };

  return (
    <AuthContext.Provider value={{ isLoggedIn, userRole, userInfo, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

// 3. Custom Hook to use the Auth Context
export const useAuth = () => {
  return useContext(AuthContext);
};


### `src/App.js` (Router and Guards)
```javascript
import React from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import { AuthProvider, useAuth } from './context/AuthContext';

// --- Import All Pages ---

// Auth Pages (P1, P2, P3, P4, P5)
import SelectLogin from './pages/Auth/SelectLogin';
import Login from './pages/Auth/Login';
import Register from './pages/Auth/Register';
import ResetPassword from './pages/Auth/ResetPassword';

// Farmer Pages (P6, P8, P11, P12, P14, P15, P17)
import FarmerDashboard from './pages/Farmer/FarmerDashboard';
import AddProduct from './pages/Farmer/AddProduct';
import SalesOrders from './pages/Farmer/SalesOrders';
import OrderDetails from './pages/Farmer/OrderDetails';
import FarmerSettingsProfile from './pages/Farmer/FarmerSettingsProfile';
import PriceAnalysis from './pages/Farmer/PriceAnalysis';
import EditProduct from './pages/Farmer/EditProduct';

// Vendor Pages (P7, P9, P10, P13, P16)
import VendorDashboard from './pages/Vendor/VendorDashboard';
import BrowseProducts from './pages/Vendor/BrowseProducts';
import ProductDetails from './pages/Vendor/ProductDetails';
import VendorOrders from './pages/Vendor/VendorOrders';
import VendorSettingsProfile from './pages/Vendor/VendorSettingsProfile';


// --- Protected Route Component ---
const ProtectedRoute = ({ children, allowedRoles }) => {
  const { isLoggedIn, userRole } = useAuth();
  
  if (!isLoggedIn) {
    return <Navigate to="/" replace />;
  }
  
  // Check if the user's role is permitted
  if (allowedRoles && !allowedRoles.includes(userRole)) {
    console.log(`Unauthorized access attempt by ${userRole}`);
    // Redirect unauthorized users to their own dashboard
    return <Navigate to={`/${userRole.toLowerCase()}/dashboard`} replace />;
  }
  
  return children;
};


// --- Main Routes Setup ---
const AppRoutes = () => {
  return (
    <Routes>
      {/* Public Routes */}
      <Route path="/" element={<SelectLogin />} />
      <Route path="/login/:role" element={<Login />} />
      <Route path="/register" element={<Register />} />
      <Route path="/reset-password" element={<ResetPassword />} />

      {/* FARMER Protected Routes (P6, P8, P11, P12, P14, P15, P17) */}
      <Route path="/farmer/dashboard" element={<ProtectedRoute allowedRoles={['Farmer']}><FarmerDashboard /></ProtectedRoute>} />
      <Route path="/farmer/add-product" element={<ProtectedRoute allowedRoles={['Farmer']}><AddProduct /></ProtectedRoute>} />
      <Route path="/farmer/orders" element={<ProtectedRoute allowedRoles={['Farmer']}><SalesOrders /></ProtectedRoute>} />
      <Route path="/farmer/orders/:orderId" element={<ProtectedRoute allowedRoles={['Farmer']}><OrderDetails /></ProtectedRoute>} />
      <Route path="/farmer/settings/profile" element={<ProtectedRoute allowedRoles={['Farmer']}><FarmerSettingsProfile /></ProtectedRoute>} />
      <Route path="/farmer/settings/analysis" element={<ProtectedRoute allowedRoles={['Farmer']}><PriceAnalysis /></ProtectedRoute>} />
      <Route path="/farmer/products/edit/:productId" element={<ProtectedRoute allowedRoles={['Farmer']}><EditProduct /></ProtectedRoute>} />

      {/* VENDOR Protected Routes (P7, P9, P10, P13, P16) */}
      <Route path="/vendor/dashboard" element={<ProtectedRoute allowedRoles={['Vendor']}><VendorDashboard /></ProtectedRoute>} />
      <Route path="/vendor/browse" element={<ProtectedRoute allowedRoles={['Vendor']}><BrowseProducts /></ProtectedRoute>} />
      <Route path="/vendor/product/:productId" element={<ProtectedRoute allowedRoles={['Vendor']}><ProductDetails /></ProtectedRoute>} />
      <Route path="/vendor/orders" element={<ProtectedRoute allowedRoles={['Vendor']}><VendorOrders /></ProtectedRoute>} />
      <Route path="/vendor/settings/profile" element={<ProtectedRoute allowedRoles={['Vendor']}><VendorSettingsProfile /></ProtectedRoute>} />

      {/* Fallback Route */}
      <Route path="*" element={<Navigate to="/" replace />} />
    </Routes>
  );
};


const App = () => (
  <AuthProvider>
    <Router>
      <AppRoutes />
    </Router>
  </AuthProvider>
);

export default App;


---

## 2. Authentication Pages (P1-P5)

### `src/pages/Auth/SelectLogin.js` (P2)
```javascript
import React from 'react';
import { useNavigate } from 'react-router-dom';
import styles from './SelectLogin.module.css';

const SelectLogin = () => {
  const navigate = useNavigate();

  const handleLoginType = (role) => {
    navigate(`/login/${role.toLowerCase()}`);
  };

  return (
    <div className={styles.container}>
      <h1 className={styles.logo}>SmartMandi</h1>
      <h2 className={styles.welcomeTitle}>Welcome to SmartMandi</h2>
      <p className={styles.tagline}>Connecting farmers and vendors for a better agricultural future</p>

      <div className={styles.roleSelection}>
        <h3>Choose Your Login Type</h3>
        <div className={styles.roleCard} onClick={() => handleLoginType('Farmer')}>
          <h4>Farmer Login</h4>
          <p>Access your farm dashboard and marketplace</p>
          <button className={styles.loginButton}>→ Login as Farmer</button>
        </div>
        
        <div className={styles.roleCard} onClick={() => handleLoginType('Vendor')}>
          <h4>Vendor Login</h4>
          <p>Manage your products and orders</p>
          <button className={styles.loginButton}>→ Login as Vendor</button>
        </div>
      </div>
      
      <p className={styles.divider}>Or</p>
      <p className={styles.registerLink}>
        New to SmartMandi? <button className={styles.linkButton} onClick={() => navigate('/register')}>+Register New Account</button>
      </p>
      
      <button className={styles.forgotLink} onClick={() => navigate('/reset-password')}>Forgot Password?</button>
      <div className={styles.footerLinks}>About &nbsp; | &nbsp; Contact</div>
    </div>
  );
};

export default SelectLogin;

### `src/pages/Auth/SelectLogin.module.css`
```css
.container {
  max-width: 400px;
  margin: 50px auto;
  padding: 30px;
  background: white;
  border-radius: 8px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  text-align: center;
}

.logo {
  color: #388e3c;
  font-size: 28px;
  margin-bottom: 20px;
}

.welcomeTitle {
    font-size: 22px;
    margin-bottom: 5px;
}

.tagline {
  font-size: 14px;
  color: #666;
  margin-bottom: 30px;
}

.roleSelection h3 {
  color: #333;
  margin-top: 20px;
  margin-bottom: 10px;
}

.roleCard {
  border: 1px solid #ddd;
  padding: 15px;
  margin: 15px 0;
  border-radius: 6px;
  text-align: left;
  cursor: pointer;
  transition: all 0.2s;
}

.roleCard:hover {
    box-shadow: 0 0 5px rgba(56, 142, 60, 0.5);
}

.roleCard h4 {
  margin: 0 0 5px 0;
  color: #388e3c;
}

.roleCard p {
    font-size: 13px;
    color: #555;
    margin-bottom: 10px;
}

.loginButton, .linkButton, .forgotLink {
  background: none;
  border: none;
  color: #1976d2;
  cursor: pointer;
  font-weight: bold;
  padding: 0;
  text-decoration: none;
  font-size: 14px;
}

.divider {
  margin: 20px 0;
  color: #999;
}

.registerLink, .forgotLink {
  display: block;
  margin-top: 15px;
}

.footerLinks {
    font-size: 12px;
    color: #999;
    margin-top: 30px;
}


### `src/pages/Auth/Login.js` (P1, P3)
```javascript
import React, { useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useAuth } from '../../context/AuthContext';
import styles from './Login.module.css';

const Login = () => {
  const { role: urlRole } = useParams(); // Get 'farmer' or 'vendor' from URL
  const navigate = useNavigate();
  const { login } = useAuth();
  
  const formattedRole = urlRole.charAt(0).toUpperCase() + urlRole.slice(1);
  const welcomeText = `Welcome, ${formattedRole}!`;
  
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  
  const handleSubmit = (e) => {
    e.preventDefault();
    if (email && password) {
        // In a real app, validate credentials against API
        if (email.includes('test') && password === 'password') {
            login(formattedRole, email);
            navigate(`/${urlRole}/dashboard`); // Redirect to appropriate dashboard
        } else {
            alert('Invalid credentials. Use email containing "test" and password "password".');
        }
    } else {
        alert('Please enter both email and password.');
    }
  };

  return (
    <div className={styles.container}>
      <h1 className={styles.logo}>SmartMandi</h1>
      <h2 className={styles.welcomeTitle}>{welcomeText}</h2>
      
      <form onSubmit={handleSubmit}>
        <input 
            type="email" 
            placeholder="Enter Email ID" 
            className={styles.inputField} 
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required 
        />
        
        <input 
            type="password" 
            placeholder="Enter Password" 
            className={styles.inputField} 
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required 
        />
        
        <button className={styles.forgotLink} type="button" onClick={() => navigate('/reset-password')}>Forgot password?</button>
        
        <button type="submit" className={styles.loginButton}>
          Login
        </button>
      </form>
      
      <p className={styles.signupLink}>
        Don't have an account? <button className={styles.linkButton} onClick={() => navigate('/register')}>Sign Up</button>
      </p>
    </div>
  );
};

export default Login;

### `src/pages/Auth/Login.module.css`
```css
.container {
  max-width: 350px;
  margin: 50px auto;
  padding: 30px;
  background: white;
  border-radius: 8px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  text-align: center;
}

.logo {
  color: #388e3c;
  font-size: 28px;
  margin-bottom: 10px;
}

.welcomeTitle {
  font-size: 20px;
  margin-bottom: 30px;
  font-weight: normal;
}

.inputField {
  width: 100%;
  padding: 12px;
  margin-bottom: 15px;
  border: 1px solid #ccc;
  border-radius: 4px;
  box-sizing: border-box;
}

.forgotLink {
  display: block;
  text-align: right;
  font-size: 12px;
  color: #1976d2;
  text-decoration: none;
  margin-bottom: 25px;
  background: none;
  border: none;
  cursor: pointer;
}

.loginButton {
  width: 100%;
  padding: 15px;
  background-color: #4CAF50;
  color: white;
  border: none;
  border-radius: 4px;
  font-size: 16px;
  cursor: pointer;
  font-weight: bold;
}

.signupLink {
  margin-top: 25px;
  font-size: 14px;
}

.linkButton {
    color: #4CAF50;
    text-decoration: none;
    font-weight: bold;
    background: none;
    border: none;
    cursor: pointer;
}


### `src/pages/Auth/ResetPassword.js` (P4)
*(Code provided in previous response, using Login.module.css)*
```javascript
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import styles from './Login.module.css'; // Reusing Login styles

const ResetPassword = () => {
  const navigate = useNavigate();
  const [email, setEmail] = useState('');
  const [newPassword, setNewPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');

  const handleSubmit = (e) => {
    e.preventDefault();
    if (newPassword !== confirmPassword) {
      alert("New password and confirmation password do not match.");
      return;
    }
    // Simulate password reset logic (API call)
    console.log('Password reset initiated for:', email);
    alert("Password reset request submitted. Check your email!");
    navigate('/'); // Go back to role selection or login page
  };

  return (
    <div className={styles.container}>
      <h1 className={styles.logo}>SmartMandi</h1>
      <h2 className={styles.welcomeTitle}>Reset Password</h2>
      
      <form onSubmit={handleSubmit}>
        <input 
            type="email" 
            placeholder="Enter Email ID" 
            className={styles.inputField} 
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required 
        />
        <input 
            type="password" 
            placeholder="Enter New Password" 
            className={styles.inputField} 
            value={newPassword}
            onChange={(e) => setNewPassword(e.target.value)}
            required 
        />
        <input 
            type="password" 
            placeholder="Confirm New Password" 
            className={styles.inputField} 
            value={confirmPassword}
            onChange={(e) => setConfirmPassword(e.target.value)}
            required 
        />
        
        {/* Note: The image shows 'Login' for the button text */}
        <button type="submit" className={styles.loginButton}>Login</button>
      </form>
    </div>
  );
};

export default ResetPassword;


### `src/pages/Auth/Register.js` (P5)
*(Code provided in previous response)*
```javascript
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import styles from './Register.module.css';

const Register = () => {
    const navigate = useNavigate();
    const [formData, setFormData] = useState({
        accountType: 'Farmer',
        fullName: '',
        email: '',
        password: '',
        confirmPassword: '',
        city: '',
        district: '',
        pincode: '',
        landmark: '',
        phoneNumber: '',
        agreedToTerms: false,
    });

    const handleChange = (e) => {
        const value = e.target.type === 'checkbox' ? e.target.checked : e.target.value;
        setFormData({ ...formData, [e.target.name]: value });
    };

    const handleSubmit = (e) => {
        e.preventDefault();
        if (formData.password !== formData.confirmPassword) {
            alert("Passwords do not match.");
            return;
        }
        if (!formData.agreedToTerms) {
            alert("You must agree to the Terms and Conditions.");
            return;
        }
        // Simulate registration (API call)
        console.log('Attempting registration:', formData);
        alert(`Registration successful for ${formData.accountType}. Please login.`);
        navigate('/');
    };

    return (
        <div className={styles.container}>
            <h1 className={styles.logo}>SmartMandi</h1>
            <h2 className={styles.title}>Register Your Account</h2>
            
            <form className={styles.form} onSubmit={handleSubmit}>
                <fieldset className={styles.accountType}>
                    <legend>Account Type</legend>
                    <label>
                        <input type="radio" name="accountType" value="Farmer" checked={formData.accountType === 'Farmer'} onChange={handleChange} /> Farmer
                    </label>
                    <label>
                        <input type="radio" name="accountType" value="Vendor" checked={formData.accountType === 'Vendor'} onChange={handleChange} /> Vendor
                    </label>
                </fieldset>

                <label className={styles.label}>Full Name *</label>
                <input type="text" name="fullName" placeholder="Enter your full name" value={formData.fullName} onChange={handleChange} required />

                <label className={styles.label}>Email Address*</label>
                <input type="email" name="email" placeholder="e.g., user@smartmandi.com" value={formData.email} onChange={handleChange} required />

                <label className={styles.label}>Password *</label>
                <input type="password" name="password" placeholder="Must be 8 characters" value={formData.password} onChange={handleChange} required />

                <label className={styles.label}>Confirm Password *</label>
                <input type="password" name="confirmPassword" placeholder="Re-enter your password" value={formData.confirmPassword} onChange={handleChange} required />

                <h3 className={styles.subtitle}>Address Details</h3>
                
                <div className={styles.row}>
                    <div className={styles.inputGroup}>
                        <label className={styles.label}>City</label>
                        <input type="text" name="city" placeholder="e.g., Pune" value={formData.city} onChange={handleChange} />
                    </div>
                    <div className={styles.inputGroup}>
                        <label className={styles.label}>District</label>
                        <input type="text" name="district" placeholder="e.g., Pune District" value={formData.district} onChange={handleChange} />
                    </div>
                </div>

                <label className={styles.label}>Pincode *</label>
                <input type="text" name="pincode" placeholder="e.g., 411001" value={formData.pincode} onChange={handleChange} required />

                <label className={styles.label}>Landmark (Optional)</label>
                <input type="text" name="landmark" placeholder="e.g., Near City Mall" value={formData.landmark} onChange={handleChange} />

                <label className={styles.label}>Phone Number *</label>
                <input type="tel" name="phoneNumber" placeholder="e.g., +91-9876543210" value={formData.phoneNumber} onChange={handleChange} required />

                <div className={styles.terms}>
                    <input type="checkbox" id="terms" name="agreedToTerms" checked={formData.agreedToTerms} onChange={handleChange} required />
                    <label htmlFor="terms">I agree to the Terms and Conditions *</label>
                </div>
                
                <button type="submit" className={styles.registerButton}>Register Account</button>
            </form>
        </div>
    );
};

export default Register;

### `src/pages/Auth/Register.module.css`
```css
.container {
  max-width: 500px;
  margin: 30px auto;
  padding: 30px;
  background: white;
  border-radius: 8px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.logo {
  color: #388e3c;
  text-align: center;
  margin-bottom: 10px;
}

.title {
  font-size: 22px;
  text-align: center;
  margin-bottom: 25px;
}

.form input[type="text"], 
.form input[type="email"], 
.form input[type="password"],
.form input[type="tel"] {
  width: 100%;
  padding: 10px;
  margin-bottom: 15px;
  border: 1px solid #ddd;
  border-radius: 4px;
  box-sizing: border-box;
}

.label {
  display: block;
  font-size: 14px;
  color: #333;
  margin-bottom: 5px;
  font-weight: 500;
}

.accountType {
  border: none;
  padding: 0;
  margin-bottom: 20px;
}

.accountType label {
  margin-right: 20px;
  font-weight: normal;
}

.subtitle {
  color: #388e3c;
  border-bottom: 1px solid #eee;
  padding-bottom: 5px;
  margin: 20px 0 15px 0;
}

.row {
    display: flex;
    gap: 15px;
    margin-bottom: 15px;
}

.row > .inputGroup {
    flex: 1;
}

.row input {
    margin-bottom: 0;
}

.terms {
  display: flex;
  align-items: center;
  margin-top: 20px;
}

.terms label {
  margin-left: 8px;
  font-weight: normal;
}

.registerButton {
  width: 100%;
  padding: 15px;
  background-color: #4CAF50;
  color: white;
  border: none;
  border-radius: 4px;
  font-size: 16px;
  cursor: pointer;
  font-weight: bold;
  margin-top: 25px;
}


---

## 3. Farmer Portal Pages (P6, P8, P11, P12, P14, P15, P17)

### `src/pages/Farmer/FarmerDashboard.js` (P6)
```javascript
import React, { useState, useEffect } from 'react';
import { useAuth } from '../../context/AuthContext';
import { useNavigate } from 'react-router-dom';
import styles from './FarmerDashboard.module.css';

const FarmerDashboard = () => {
    const { userInfo, logout } = useAuth();
    const navigate = useNavigate();
    
    const [stats, setStats] = useState({ 
        activeListings: 24, 
        pendingOrders: 8, 
        processingValue: 750.00, 
        deliveredValue: 1800.00 
    });
    const [listings, setListings] = useState([
        { id: 1, name: "Organic Tomatoes", details: "Fresh vine-ripened tomatoes", price: "15/kg", stock: "150kg", status: "Available" },
        { id: 2, name: "Fresh Onions", details: "Crisp iceberg lettuce heads", price: "60/kg", stock: "25 heads", status: "Low Stock" },
        { id: 3, name: "Carrots", details: "Sweet baby carrots with tops", price: "60/kg", stock: "80kg", status: "Available" },
    ]);
    const [recentBuyers, setRecentBuyers] = useState([
        { name: "Vishw Grocery", time: "2 hours ago" },
        { name: "Shreedatta Market", time: "5 hours ago" },
    ]);

    // Simulates an API call to load dynamic data
    useEffect(() => {
        // In a real app, you'd fetch data here
        console.log('Farmer Dashboard data loaded.');
    }, []);

    const handleAddProduct = () => navigate('/farmer/add-product');
    const handleEditProduct = (productId) => navigate(`/farmer/products/edit/${productId}`);

    return (
        <div className={styles.container}>
            <h1 className={styles.logo}>SmartMandi</h1>
            
            <div className={styles.headerInfo}>
                <div className={styles.searchBar}>
                    <input type="text" placeholder="Search products" />
                </div>
                <div className={styles.userInfo}>
                    <span>{userInfo?.name || 'Sanket Hiremath'}</span>
                    <button className={styles.logoutButton} onClick={logout}>Logout</button>
                </div>
            </div>
            
            <div className={styles.statsCards}>
                <div className={styles.card}>Active Listings: {stats.activeListings}</div>
                <div className={styles.card}>Pending Orders: {stats.pendingOrders}</div>
                <div className={styles.card}>₹{stats.processingValue.toFixed(2)} Processing</div>
                <div className={styles.card}>₹{stats.deliveredValue.toFixed(2)} Delivered</div>
            </div>
            
            <div className={styles.contentGrid}>
                <div className={styles.listingsSection}>
                    <h2 className={styles.sectionHeader}>My Product Listings</h2>
                    <button className={styles.addProductBtn} onClick={handleAddProduct}>+Add New Product</button>
                    
                    {listings.map((item) => (
                        <div key={item.id} className={styles.productCard} onClick={() => handleEditProduct(item.id)}>
                            <div className={`${styles.statusTag} ${item.status === 'Low Stock' ? styles.lowStock : styles.available}`}>{item.status}</div>
                            <h4>{item.name}</h4>
                            <p className={styles.details}>{item.details}</p>
                            <p className={styles.stockInfo}>{item.price} | Stock: {item.stock}</p>
                        </div>
                    ))}
                </div>

                <div className={styles.sidebar}>
                    <h2 className={styles.sectionHeader}>Categories</h2>
                    <ul className={styles.categoryList}>
                        <li>Vegetables (12)</li>
                        <li>Fruits (8)</li>
                        <li>Grains (4)</li>
                    </ul>

                    <h2 className={styles.sectionHeader}>Recent Buyers</h2>
                    <ul className={styles.buyerList}>
                        {recentBuyers.map((buyer, index) => (
                            <li key={index} className={styles.buyerItem}>
                                <span>{buyer.name}</span>
                                <span className={styles.time}>{buyer.time}</span>
                            </li>
                        ))}
                    </ul>

                    <h2 className={styles.sectionHeader}>Recent Orders</h2>
                    <p className={styles.recentOrder}>Dharwad Grocery Store: Ordered 50kg Organic Tomatoes</p>
                    <p className={styles.recentOrder}>Fresh Market: Ordered 30kg Carrots</p>
                </div>
            </div>
        </div>
    );
};

export default FarmerDashboard;

### `src/pages/Farmer/FarmerDashboard.module.css`
```css
.container {
  max-width: 1200px;
  margin: 30px auto;
  padding: 30px;
  background: white;
  border-radius: 8px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.logo {
  color: #388e3c;
  text-align: center;
  margin-bottom: 20px;
}

.headerInfo {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    border-bottom: 1px solid #eee;
    padding-bottom: 15px;
}

.searchBar input {
    padding: 8px 15px;
    border: 1px solid #ddd;
    border-radius: 20px;
    width: 300px;
}

.userInfo {
    display: flex;
    align-items: center;
    font-weight: bold;
    font-size: 14px;
}

.logoutButton {
    background: #f44336;
    color: white;
    border: none;
    padding: 8px 15px;
    border-radius: 4px;
    cursor: pointer;
    margin-left: 15px;
}

.statsCards {
    display: flex;
    justify-content: space-between;
    gap: 20px;
    margin-bottom: 30px;
}

.card {
    flex: 1;
    background-color: #f7f7f7;
    padding: 15px;
    border-radius: 6px;
    text-align: center;
    font-weight: bold;
    color: #333;
}

.contentGrid {
    display: grid;
    grid-template-columns: 2fr 1fr;
    gap: 30px;
}

.sectionHeader {
    color: #388e3c;
    font-size: 18px;
    border-bottom: 1px solid #eee;
    padding-bottom: 5px;
    margin: 20px 0 15px 0;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.addProductBtn {
    background-color: #2196f3;
    color: white;
    border: none;
    padding: 8px 15px;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
}

.productCard {
    background: #fff;
    border: 1px solid #ddd;
    padding: 15px;
    border-radius: 6px;
    margin-bottom: 15px;
    position: relative;
    cursor: pointer;
    transition: box-shadow 0.2s;
}

.productCard:hover {
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.statusTag {
    position: absolute;
    top: 10px;
    right: 10px;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 12px;
    font-weight: bold;
    color: white;
}

.available {
    background-color: #4CAF50;
}

.lowStock {
    background-color: #ff9800;
}

.productCard h4 {
    margin: 0 0 5px 0;
    font-size: 16px;
}

.details, .stockInfo {
    font-size: 13px;
    color: #666;
}

.categoryList {
    list-style: none;
    padding: 0;
}

.categoryList li {
    padding: 5px 0;
    font-size: 14px;
    color: #555;
    border-bottom: 1px dashed #eee;
}

.buyerItem {
    display: flex;
    justify-content: space-between;
    padding: 8px 0;
    font-size: 14px;
    border-bottom: 1px dashed #eee;
}

.time {
    color: #999;
    font-size: 12px;
}

.recentOrder {
    font-size: 13px;
    padding: 5px 0;
    border-bottom: 1px dashed #eee;
}


### `src/pages/Farmer/AddProduct.js` (P8)
*(Code provided in previous response, updated with hooks)*
```javascript
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import styles from './AddProduct.module.css';

const AddProduct = () => {
  const navigate = useNavigate();
  const [formData, setFormData] = useState({
    productName: '', category: '', description: '',
    quantity: '', unitType: 'Kilograms (kg)', price: '', minOrderQty: '',
  });

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    // Simulate API call to list product
    console.log('Listing product:', formData);
    alert(`Product ${formData.productName} listed successfully!`);
    navigate('/farmer/dashboard');
  };

  const handleReset = () => {
    setFormData({
        productName: '', category: '', description: '',
        quantity: '', unitType: 'Kilograms (kg)', price: '', minOrderQty: '',
    });
    // Placeholder for image reset logic
  };

  return (
    <div className={styles.container}>
      <h1 className={styles.logo}>SmartMandi</h1>
      <h2 className={styles.title}>Add New Produce</h2>
      <p className={styles.subtitle}>Enter the details for the product you wish to list on SmartMandi.</p>

      <form className={styles.form} onSubmit={handleSubmit}>
        <h3 className={styles.sectionTitle}>Basic Product Information</h3>
        <label className={styles.label}>Product Name *</label>
        <input type="text" name="productName" placeholder="e.g., Fresh Organic Wheat, Roma Tomatoes" value={formData.productName} onChange={handleChange} required />

        <label className={styles.label}>Category *</label>
        <select name="category" value={formData.category} onChange={handleChange} required>
            <option value="">Select a primary category</option>
            <option value="Vegetables">Vegetables</option>
            <option value="Fruits">Fruits</option>
            <option value="Grains">Grains</option>
        </select>

        <label className={styles.label}>Product Description</label>
        <textarea rows="3" name="description" placeholder="Briefly describe the quality, origin, and variety..." value={formData.description} onChange={handleChange} required></textarea>

        <h3 className={styles.sectionTitle}>Pricing and Inventory</h3>
        <div className={styles.row}>
            <div className={styles.inputGroup}>
                <label className={styles.label}>Quantity Available *</label>
                <input type="number" name="quantity" placeholder="e.g., 500" value={formData.quantity} onChange={handleChange} required />
            </div>
            <div className={styles.inputGroup}>
                <label className={styles.label}>Unit Type *</label>
                <input type="text" name="unitType" value={formData.unitType} readOnly />
            </div>
        </div>

        <label className={styles.label}>Price per Unit (INR) *</label>
        <input type="text" name="price" placeholder="e.g., 35.50" value={formData.price} onChange={handleChange} required />
        
        <label className={styles.label}>Minimum Order Quantity</label>
        <input type="number" name="minOrderQty" placeholder="e.g., 10 (units)" value={formData.minOrderQty} onChange={handleChange} required />

        <h3 className={styles.sectionTitle}>Product Images *</h3>
        <p className={styles.imageTip}>Upload at least one high-quality image of your produce. (Max 4 images)</p>
        
        <div className={styles.imageUploadArea}>
            <button type="button" className={styles.uploadButton}>Upload Photos</button>
            <div className={styles.imagePreviews}>
                <div className={styles.imageBox}>Image 1</div>
                <div className={styles.imageBox}>Image 2</div>
                <div className={styles.imageBox}>Image 3</div>
                <div className={styles.imageBox}>Image 4</div>
            </div>
        </div>

        <div className={styles.buttonActions}>
            <button type="button" className={styles.cancelButton} onClick={handleReset}>Cancel / Reset</button>
            <button type="submit" className={styles.listButton}>List Product on SmartMandi</button>
        </div>
      </form>
    </div>
  );
};

export default AddProduct;

### `src/pages/Farmer/AddProduct.module.css`
```css
.container {
  max-width: 700px;
  margin: 30px auto;
  padding: 30px;
  background: white;
  border-radius: 8px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.logo {
  color: #388e3c;
  text-align: center;
  margin-bottom: 15px;
}

.title {
  font-size: 24px;
  margin-bottom: 5px;
}

.subtitle {
  font-size: 14px;
  color: #666;
  margin-bottom: 30px;
}

.sectionTitle {
  color: #388e3c;
  font-size: 18px;
  border-bottom: 1px solid #eee;
  padding-bottom: 5px;
  margin: 30px 0 15px 0;
}

.label {
  display: block;
  font-size: 14px;
  color: #333;
  margin-bottom: 5px;
  font-weight: 500;
}

.form input[type="text"], 
.form input[type="number"], 
.form textarea,
.form select {
  width: 100%;
  padding: 10px;
  margin-bottom: 15px;
  border: 1px solid #ddd;
  border-radius: 4px;
  box-sizing: border-box;
}

.row {
    display: flex;
    gap: 15px;
}

.inputGroup {
    flex: 1;
}

.imageTip {
    font-size: 13px;
    color: #999;
}

.imageUploadArea {
    border: 2px dashed #ccc;
    padding: 20px;
    border-radius: 6px;
    text-align: center;
}

.uploadButton {
    background-color: #4CAF50;
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 4px;
    cursor: pointer;
    margin-bottom: 15px;
}

.imagePreviews {
    display: flex;
    justify-content: space-around;
}

.imageBox {
    width: 22%;
    height: 60px;
    border: 1px solid #ddd;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 12px;
    color: #999;
    background-color: #f9f9f9;
}

.buttonActions {
    display: flex;
    justify-content: flex-end;
    gap: 15px;
    margin-top: 30px;
}

.listButton {
  padding: 12px 25px;
  background-color: #388e3c;
  color: white;
  border: none;
  border-radius: 4px;
  font-size: 16px;
  cursor: pointer;
  font-weight: bold;
}

.cancelButton {
  padding: 12px 25px;
  background-color: #ccc;
  color: #333;
  border: none;
  border-radius: 4px;
  font-size: 16px;
  cursor: pointer;
}


### `src/pages/Farmer/EditProduct.js` (P17)
```javascript
import React, { useState, useEffect } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import styles from './AddProduct.module.css'; // Reusing AddProduct styles for form consistency

const EditProduct = () => {
  const { productId } = useParams();
  const navigate = useNavigate();
  const [formData, setFormData] = useState({
    productName: 'Fresh Organic Roma Tomatoes', 
    category: 'Vegetables', 
    description: 'Premium quality, vine-ripened Roma tomatoes, perfect for sauces and salads. Grown organically on our farm.',
    quantity: '500', 
    unitType: 'Kilograms (kg)', 
    price: '35.50', 
    minOrderQty: '10',
  });

  // Simulate fetching product data to pre-populate form
  useEffect(() => {
    console.log(`Fetching details for product ID: ${productId}`);
    // In a real app: fetchProductDetails(productId).then(data => setFormData(data));
  }, [productId]);

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleUpdate = (e) => {
    e.preventDefault();
    // Simulate API call to update product
    console.log(`Updating product ${productId}:`, formData);
    alert(`Product ${formData.productName} updated successfully!`);
    navigate('/farmer/dashboard');
  };

  const handleCancel = () => {
    navigate('/farmer/dashboard');
  };

  return (
    <div className={styles.container}>
      <h1 className={styles.logo}>SmartMandi</h1>
      <h2 className={styles.title}>Edit Product</h2>
      <p className={styles.subtitle}>Update the details for your existing product on SmartMandi.</p>

      <form className={styles.form} onSubmit={handleUpdate}>
        <h3 className={styles.sectionTitle}>Basic Product Information</h3>
        <label className={styles.label}>Product Name *</label>
        <input type="text" name="productName" value={formData.productName} onChange={handleChange} required />

        <label className={styles.label}>Category</label>
        <input type="text" value={formData.category} readOnly />

        <label className={styles.label}>Product Description</label>
        <textarea rows="3" name="description" value={formData.description} onChange={handleChange} required></textarea>

        <h3 className={styles.sectionTitle}>Pricing and Inventory</h3>
        <div className={styles.row}>
            <div className={styles.inputGroup}>
                <label className={styles.label}>Quantity Available</label>
                <input type="number" name="quantity" value={formData.quantity} onChange={handleChange} required />
            </div>
            <div className={styles.inputGroup}>
                <label className={styles.label}>Unit Type</label>
                <input type="text" value={formData.unitType} readOnly />
            </div>
        </div>

        <label className={styles.label}>Price per Unit (INR)</label>
        <input type="text" name="price" value={formData.price} onChange={handleChange} required />
        
        <label className={styles.label}>Minimum Order Quantity</label>
        <input type="number" name="minOrderQty" value={formData.minOrderQty} onChange={handleChange} required />

        <h3 className={styles.sectionTitle}>Product Images *</h3>
        <p className={styles.imageTip}>Upload at least one high-quality image of your product. (Max 4 Images).</p>
        
        <div className={styles.imageUploadArea}>
            <button type="button" className={styles.uploadButton}>Upload Photos</button>
            <div className={styles.imagePreviews}>
                <div className={styles.imageBox}>Image 1 (Current)</div>
                <div className={styles.imageBox}>Image 2 (Current)</div>
                <div className={styles.imageBox}>Image 3</div>
                <div className={styles.imageBox}>Image 4</div>
            </div>
        </div>

        <div className={styles.buttonActions}>
            <button type="button" className={styles.cancelButton} onClick={handleCancel}>Cancel / Discard Changes</button>
            <button type="submit" className={styles.listButton}>Update Product on SmartMandi</button>
        </div>
      </form>
    </div>
  );
};

export default EditProduct;


### `src/pages/Farmer/SalesOrders.js` (P11)
*(Code provided in previous response)*
```javascript
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import styles from './SalesOrders.module.css';

const SalesOrders = () => {
    const navigate = useNavigate();
    const [orders, setOrders] = useState([]);
    
    // Simulate fetching order data
    useEffect(() => {
        setOrders([
            { id: 9012, product: "Organic Tomatoes", qty: "1,500 kg", vendor: "Dharwad Market", total: "₹52,500", status: "Delivered", payment: "Paid" },
            { id: 9013, product: "Premium Wheat", qty: "50 Quintals", vendor: "Fresh Greens", total: "₹1,10,000", status: "New Order", payment: "Awaiting Payment" },
            { id: 9014, product: "Fresh Apples", qty: "5 Tons", vendor: "Vishw Market", total: "₹6,00,000", status: "In Transit", payment: "Paid" },
            { id: 9015, product: "Brown Rice", qty: "2500 kg", vendor: "Agro Market", total: "₹47,500", status: "Processing", payment: "Paid" },
        ]);
    }, []);

    const handleViewDetails = (orderId) => {
        navigate(`/farmer/orders/${orderId}`); // Navigate to order details page
    };

    const getStatusClass = (status) => {
        const statusMap = {
            'New Order': 'new',
            'Delivered': 'delivered',
            'In Transit': 'transit',
            'Processing': 'processing',
        };
        return styles[statusMap[status] || 'default'];
    };

    return (
        <div className={styles.container}>
            <h1 className={styles.logo}>SmartMandi</h1>
            <h2 className={styles.title}>Sales Orders</h2>
            <p className={styles.subtitle}>Track all incoming and completed purchase orders from vendors.</p>

            <div className={styles.statsBar}>
                <div className={styles.statBox}>
                    <div className={styles.statValue}>5</div>
                    <div className={styles.statLabel}>New Orders (Action Needed)</div>
                </div>
                <div className={styles.statBox}>
                    <div className={styles.statValue}>12</div>
                    <div className={styles.statLabel}>Pending Delivery</div>
                </div>
                <div className={styles.statBox}>
                    <div className={styles.statValue}>₹78,500</div>
                    <div className={styles.statLabel}>Payments Due</div>
                </div>
            </div>

            <h3 className={styles.listHeader}>All Sales (25 Total)</h3>
            
            <div className={styles.filterBar}>
                <button className={styles.filterButton}>Filter Orders</button>
                <span className={styles.showingText}>Showing 1 to 25 of 25 Sales Orders.</span>
            </div>

            <div className={styles.tableContainer}>
                <table className={styles.ordersTable}>
                    <thead>
                        <tr>
                            <th>Order ID</th><th>Product Sold</th><th>Quantity</th><th>Vendor (Buyer)</th>
                            <th>Total Amount</th><th>Order Status</th><th>Payment Status</th><th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        {orders.map(order => (
                            <tr key={order.id}>
                                <td>{order.id}</td><td>{order.product}</td><td>{order.qty}</td>
                                <td>{order.vendor}</td><td>{order.total}</td>
                                <td><span className={getStatusClass(order.status)}>{order.status}</span></td>
                                <td>{order.payment}</td>
                                <td><button className={styles.viewButton} onClick={() => handleViewDetails(order.id)}>View Details</button></td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>
        </div>
    );
};

export default SalesOrders;

### `src/pages/Farmer/SalesOrders.module.css`
```css
.container {
  max-width: 1000px;
  margin: 30px auto;
  padding: 30px;
}

.logo {
  color: #388e3c;
  text-align: center;
  margin-bottom: 15px;
}

.title {
  font-size: 24px;
  margin-bottom: 5px;
}

.subtitle {
  font-size: 14px;
  color: #666;
  margin-bottom: 30px;
}

.statsBar {
    display: flex;
    justify-content: space-between;
    background-color: #f0f4f7;
    padding: 15px;
    border-radius: 6px;
    margin-bottom: 30px;
}

.statBox {
    text-align: center;
    padding: 0 15px;
}

.statValue {
    font-size: 24px;
    font-weight: bold;
    color: #388e3c;
}

.statLabel {
    font-size: 12px;
    color: #555;
}

.listHeader {
    font-size: 18px;
    margin-bottom: 15px;
}

.filterBar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
}

.filterButton {
    background-color: #eee;
    border: 1px solid #ccc;
    padding: 8px 15px;
    border-radius: 4px;
    cursor: pointer;
}

.showingText {
    font-size: 13px;
    color: #666;
}

.tableContainer {
    overflow-x: auto;
    background: white;
    border-radius: 6px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
}

.ordersTable {
    width: 100%;
    border-collapse: collapse;
}

.ordersTable th, .ordersTable td {
    padding: 12px;
    text-align: left;
    border-bottom: 1px solid #eee;
    font-size: 14px;
}

.ordersTable th {
    background-color: #f7f7f7;
    font-weight: bold;
    color: #333;
}

.ordersTable tr:last-child td {
    border-bottom: none;
}

.viewButton {
    background: none;
    border: 1px solid #1976d2;
    color: #1976d2;
    padding: 5px 10px;
    border-radius: 4px;
    cursor: pointer;
}

/* Status Styling */
.new {
    background-color: #ff9800;
    color: white;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 12px;
}
.delivered {
    background-color: #4CAF50;
    color: white;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 12px;
}
.transit {
    background-color: #2196f3;
    color: white;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 12px;
}
.processing {
    background-color: #9e9e9e;
    color: white;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 12px;
}


### `src/pages/Farmer/OrderDetails.js` (P12)
*(Code provided in previous response)*
```javascript
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import styles from './OrderDetails.module.css';

const OrderDetails = () => {
    const { orderId } = useParams();
    const navigate = useNavigate();
    const [order, setOrder] = useState(null);
    
    // Simulate fetching specific order details
    useEffect(() => {
        // Simulating data fetch based on orderId
        setOrder({
            id: 9013, 
            status: "New Order - Awaiting Acceptance",
            placedDate: "October 20, 2025",
            buyer: "Wholesale Bakers Ltd",
            products: [{ name: "Premium Durum Wheat (FM401)", qty: "50 Quintals", unitPrice: "₹2,200", subtotal: "₹1,10,000" }],
            notes: "Required delivery within 7 days. Please contact our logistics manager 24 hours prior to dispatch.",
            buyerDetails: "Wholesale Bakers Ltd (VEN105)",
            contact: "Vishw Vora +91 1234567890",
            shippingAddress: "IIT dharwad, karnataka",
            requiredDeliveryDate: "Oct 27, 2025",
            grossValue: "₹1,10,000",
            commission: "₹2,200",
            netPayable: "₹1,07,800",
            paymentStatus: "Awaiting Payment Confirmation",
            fulfillment: "SmartMandi Logistics Partner (Partner: Delhivery)",
        });
    }, [orderId]);

    const handleAction = (action) => {
        // Simulate acceptance/rejection logic
        console.log(`Order ${orderId}: ${action} attempted.`);
        alert(`Order ${orderId} has been ${action.toLowerCase()}!`);
        navigate('/farmer/orders');
    };

    if (!order) return <div className={styles.loading}>Loading order details...</div>;

    return (
        <div className={styles.container}>
            <h1 className={styles.logo}>SmartMandi</h1>
            <h2 className={styles.title}>Sales Order: #{order.id}</h2>
            <p className={styles.actionNeeded}>Action needed: Confirm acceptarice and prepare for shipment.</p>

            <div className={styles.statusBox}>
                {order.status}
                <span className={styles.placedDate}>Placed on {order.placedDate} by {order.buyer}</span>
            </div>

            <div className={styles.contentGrid}>
                <div className={styles.productsSold}>
                    <h3 className={styles.sectionTitle}>Products Sold (1 Item)</h3>
                    <table className={styles.productsTable}>
                        <thead>
                            <tr><th>Product/ID</th><th>Quantity</th><th>Unit Price</th><th>Subtotal</th></tr>
                        </thead>
                        <tbody>
                            {order.products.map((p, i) => (
                                <tr key={i}>
                                    <td>{p.name}</td><td>{p.qty}</td><td>{p.unitPrice}</td><td>{p.subtotal}</td>
                                </tr>
                            ))}
                        </tbody>
                    </table>

                    <h3 className={styles.sectionTitle}>Buyer Notes</h3>
                    <p className={styles.notes}>"{order.notes}"</p>

                    <h3 className={styles.sectionTitle}>Farmer Actions</h3>
                    <div className={styles.actionButtons}>
                        <button className={styles.confirmButton} onClick={() => handleAction('Accepted')}>Confirm Acceptance</button>
                        <button className={styles.rejectButton} onClick={() => handleAction('Rejected')}>Reject Order</button>
                    </div>
                    <p className={styles.actionTip}>You have 24 hours to confirm acceptance of this order.</p>

                </div>

                <div className={styles.sidebar}>
                    <h3 className={styles.sectionTitle}>Buyer & Delivery Information</h3>
                    <p><strong>Buyer Details:</strong> {order.buyerDetails}</p>
                    <p>Contact Person: {order.contact}</p>
                    <p><strong>Shipping Address:</strong> {order.shippingAddress}</p>
                    <p>Required Delivery Date: **{order.requiredDeliveryDate}**</p>

                    <h3 className={styles.sectionTitle}>Financial Overview</h3>
                    <div className={styles.financials}>
                        <p><span>Gross Sale Value:</span><span>{order.grossValue}</span></p>
                        <p><span>SmartMandi Commission (2%):</span><span className={styles.commission}>{order.commission}</span></p>
                        <p><span>Est. Logistics Fee (Covered by Buyer):</span><span>₹0</span></p>
                        <p className={styles.netPayable}><span>Net Payable to Farmer:</span><span>{order.netPayable}</span></p>
                    </div>

                    <h3 className={styles.sectionTitle}>Status & Logistics</h3>
                    <p><strong>Payment Status:</strong> {order.paymentStatus}</p>
                    <p className={styles.paymentInfo}>Funds secured by SmartMandi Escrow. Payment released upon delivery confirmation.</p>
                    <p><strong>Fulfillment Type:</strong> {order.fulfillment}</p>
                    <button className={styles.readyButton} onClick={() => alert('Marked order ready for pickup.')}>Mark Ready for Pickup</button>
                </div>
            </div>

            <button className={styles.backButton} onClick={() => navigate('/farmer/orders')}>← Back to Sales</button>
        </div>
    );
};

export default OrderDetails;

### `src/pages/Farmer/OrderDetails.module.css`
```css
.container {
  max-width: 1000px;
  margin: 30px auto;
  padding: 30px;
}

.logo {
  color: #388e3c;
  text-align: center;
  margin-bottom: 15px;
}

.title {
  font-size: 24px;
}

.actionNeeded {
    background-color: #fff3e0;
    color: #e65100;
    padding: 10px;
    border-left: 4px solid #e65100;
    margin-bottom: 20px;
    font-size: 14px;
}

.statusBox {
    background-color: #d1e7dd;
    color: #0f5132;
    padding: 15px;
    border-radius: 6px;
    font-weight: bold;
    margin-bottom: 20px;
}

.placedDate {
    font-weight: normal;
    display: block;
    font-size: 12px;
    margin-top: 5px;
}

.contentGrid {
    display: grid;
    grid-template-columns: 2fr 1fr;
    gap: 30px;
}

.sectionTitle {
    color: #333;
    font-size: 16px;
    border-bottom: 1px solid #eee;
    padding-bottom: 5px;
    margin: 20px 0 10px 0;
}

.productsTable {
    width: 100%;
    border-collapse: collapse;
}

.productsTable th, .productsTable td {
    padding: 10px;
    text-align: left;
    border-bottom: 1px solid #eee;
    font-size: 14px;
}

.notes {
    background-color: #f7f7f7;
    padding: 15px;
    border-radius: 6px;
    font-size: 14px;
    border-left: 3px solid #ccc;
}

.actionButtons {
    margin-top: 15px;
}

.confirmButton {
    background-color: #388e3c;
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 4px;
    cursor: pointer;
    margin-right: 10px;
}

.rejectButton {
    background-color: #dc3545;
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 4px;
    cursor: pointer;
}

.actionTip {
    font-size: 12px;
    color: #999;
    margin-top: 10px;
}

.sidebar p {
    font-size: 14px;
    margin-bottom: 8px;
}

.financials p {
    display: flex;
    justify-content: space-between;
    font-size: 14px;
    padding: 5px 0;
    border-bottom: 1px dashed #eee;
}

.financials p:last-child {
    border-bottom: none;
    font-weight: bold;
    padding-top: 10px;
    margin-top: 10px;
    border-top: 2px solid #333;
}

.commission {
    color: #dc3545;
}

.paymentInfo {
    font-size: 12px;
    color: #999;
    margin-bottom: 15px;
}

.readyButton {
    width: 100%;
    padding: 10px;
    background-color: #1976d2;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    margin-top: 10px;
}

.backButton {
    background: #f0f0f0;
    border: none;
    padding: 10px 15px;
    border-radius: 4px;
    margin-top: 25px;
    cursor: pointer;
}


### `src/pages/Farmer/FarmerSettingsProfile.js` (P14)
```javascript
import React, { useState } from 'react';
import { useAuth } from '../../context/AuthContext';
import styles from './SettingsProfile.module.css';

const FarmerSettingsProfile = () => {
  const { userInfo } = useAuth();
  const [profileData, setProfileData] = useState({
    fullName: userInfo?.name || 'Sanket Hiremath',
    email: userInfo?.email || 'sanket@example.com',
    phoneNumber: '+91 1234567890',
    city: 'Dharwad',
    stateDistrict: 'Karnatak',
    pincode: '111111',
    landmark: 'IIT',
    accountHolder: userInfo?.name || 'Sanket Hiremath',
    accountNumber: '1234567890123',
    ifscCode: 'SBIN0000000',
  });

  const handleChange = (e) => {
    setProfileData({ ...profileData, [e.target.name]: e.target.value });
  };

  const handleSave = (e) => {
    e.preventDefault();
    // Simulate API call to save profile changes
    console.log('Saving profile:', profileData);
    alert('Profile changes saved successfully!');
  };

  const handleReset = () => {
    // Reload initial data or reset form
    setProfileData({
        fullName: 'Sanket Hiremath', email: 'sanket@example.com', phoneNumber: '+91 1234567890',
        city: 'Dharwad', stateDistrict: 'Karnatak', pincode: '111111', landmark: 'IIT',
        accountHolder: 'Sanket Hiremath', accountNumber: '1234567890123', ifscCode: 'SBIN0000000',
    });
  };

  return (
    <div className={styles.container}>
      <h1 className={styles.logo}>SmartMandi</h1>
      <h2 className={styles.title}>Edit Profile & Address</h2>
      <p className={styles.subtitle}>Update your contact and primary location details.</p>

      <form className={styles.form} onSubmit={handleSave}>
        <h3 className={styles.sectionTitle}>Personal & Contact Details</h3>
        <label className={styles.label}>Full Name</label>
        <input type="text" name="fullName" value={profileData.fullName} onChange={handleChange} />

        <label className={styles.label}>Email Address*</label>
        <input type="email" name="email" value={profileData.email} onChange={handleChange} required />
        
        <label className={styles.label}>Phone Number *</label>
        <input type="tel" name="phoneNumber" value={profileData.phoneNumber} onChange={handleChange} required />

        <h3 className={styles.sectionTitle}>Primary Address</h3>
        <div className={styles.row}>
            <div className={styles.inputGroup}>
                <label className={styles.label}>City</label>
                <input type="text" name="city" value={profileData.city} onChange={handleChange} />
            </div>
            <div className={styles.inputGroup}>
                <label className={styles.label}>State/District</label>
                <input type="text" name="stateDistrict" value={profileData.stateDistrict} onChange={handleChange} />
            </div>
        </div>

        <label className={styles.label}>Pincode</label>
        <input type="text" name="pincode" value={profileData.pincode} onChange={handleChange} />
        
        <label className={styles.label}>Landmark (Optional)</label>
        <input type="text" name="landmark" value={profileData.landmark} onChange={handleChange} />

        <h3 className={styles.sectionTitle}>Banking Information (Mandatory for Payouts)</h3>
        <p className={styles.bankTip}>This information is strictly confidential and **required** to receive payments from SmartMandi for your sales</p>
        
        <label className={styles.label}>Account Holder Name</label>
        <input type="text" name="accountHolder" value={profileData.accountHolder} onChange={handleChange} />

        <label className={styles.label}>Account Number*</label>
        <input type="text" name="accountNumber" value={profileData.accountNumber} onChange={handleChange} required />

        <label className={styles.label}>IFSC Code</label>
        <input type="text" name="ifscCode" value={profileData.ifscCode} onChange={handleChange} />
        
        <div className={styles.buttonActions}>
            <button type="button" className={styles.resetButton} onClick={handleReset}>Reset Form</button>
            <button type="submit" className={styles.saveButton}>Save Profile Changes</button>
        </div>
      </form>
    </div>
  );
};

export default FarmerSettingsProfile;

### `src/pages/Farmer/SettingsProfile.module.css` (Used by P14 and P16)
```css
.container {
  max-width: 650px;
  margin: 30px auto;
  padding: 30px;
  background: white;
  border-radius: 8px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.logo {
  color: #388e3c;
  text-align: center;
  margin-bottom: 15px;
}

.title {
  font-size: 24px;
}

.subtitle {
  font-size: 14px;
  color: #666;
  margin-bottom: 30px;
}

.sectionTitle {
  color: #388e3c;
  font-size: 18px;
  border-bottom: 1px solid #eee;
  padding-bottom: 5px;
  margin: 30px 0 15px 0;
}

.label {
  display: block;
  font-size: 14px;
  color: #333;
  margin-bottom: 5px;
  font-weight: 500;
}

.form input[type="text"], 
.form input[type="email"], 
.form input[type="tel"] {
  width: 100%;
  padding: 10px;
  margin-bottom: 15px;
  border: 1px solid #ddd;
  border-radius: 4px;
  box-sizing: border-box;
}

.row {
    display: flex;
    gap: 15px;
}

.inputGroup {
    flex: 1;
}

.bankTip {
    font-size: 13px;
    color: #dc3545;
    background-color: #f8d7da;
    padding: 10px;
    border-radius: 4px;
    margin-bottom: 20px;
}

.buttonActions {
    display: flex;
    justify-content: flex-end;
    gap: 15px;
    margin-top: 30px;
}

.saveButton {
  padding: 12px 25px;
  background-color: #388e3c;
  color: white;
  border: none;
  border-radius: 4px;
  font-size: 16px;
  cursor: pointer;
  font-weight: bold;
}

.resetButton {
  padding: 12px 25px;
  background-color: #ccc;
  color: #333;
  border: none;
  border-radius: 4px;
  font-size: 16px;
  cursor: pointer;
}


### `src/pages/Farmer/PriceAnalysis.js` (P15)
```javascript
import React, { useState, useEffect } from 'react';
import styles from './PriceAnalysis.module.css';

const PriceAnalysis = () => {
  const [filters, setFilters] = useState({ product: 'Organic Tomatoes', timeRange: 'Last 7 Days' });
  const [analysis, setAnalysis] = useState({
    avgMarketPrice: 32.50,
    avgSellingPrice: 35.50,
    highestPrice: 45.00,
    priceTrend: -4.2,
  });

  // Simulate fetching analysis data based on filters
  useEffect(() => {
    // In a real app, this would trigger an API call
    console.log('Fetching analysis for:', filters);
    // Simulating slight data change for effect
    if (filters.timeRange === 'Last 7 Days') {
        setAnalysis({ ...analysis, avgMarketPrice: 32.50, priceTrend: -4.2 });
    } else {
        setAnalysis({ ...analysis, avgMarketPrice: 38.00, priceTrend: 5.1 });
    }
  }, [filters]); // Dependency array ensures data updates when filters change

  const handleFilterChange = (e) => {
    setFilters({ ...filters, [e.target.name]: e.target.value });
  };

  const trendClass = analysis.priceTrend > 0 ? styles.trendUp : styles.trendDown;

  return (
    <div className={styles.container}>
      <h1 className={styles.logo}>SmartMandi</h1>
      <h2 className={styles.title}>Produce Price Analysis</h2>
      <p className={styles.subtitle}>Gain insights into market prices and optimize your selling strategy.</p>

      <div className={styles.analysisCard}>
        <h3 className={styles.sectionTitle}>Analysis Filters</h3>
        <div className={styles.filters}>
            <div className={styles.filterGroup}>
                <label className={styles.label}>Select Produce*</label>
                <select name="product" value={filters.product} onChange={handleFilterChange} className={styles.selectInput}>
                    <option value="Organic Tomatoes">Organic Tomatoes</option>
                    <option value="Premium Wheat">Premium Wheat</option>
                </select>
            </div>
            <div className={styles.filterGroup}>
                <label className={styles.label}>Time Range</label>
                <select name="timeRange" value={filters.timeRange} onChange={handleFilterChange} className={styles.selectInput}>
                    <option value="Last 7 Days">Last 7 Days</option>
                    <option value="Last 30 Days">Last 30 Days</option>
                </select>
            </div>
            <button className={styles.applyButton}>Apply Analysis</button>
        </div>

        <div className={styles.metrics}>
            <div className={styles.metricBox}>
                <p className={styles.metricLabel}>Avg. Market Price (₹/kg)</p>
                <p className={styles.metricValue}>{analysis.avgMarketPrice.toFixed(2)}</p>
            </div>
            <div className={styles.metricBox}>
                <p className={styles.metricLabel}>Your Avg. Selling Price (₹/kg)</p>
                <p className={styles.metricValue}>{analysis.avgSellingPrice.toFixed(2)}</p>
            </div>
            <div className={styles.metricBox}>
                <p className={styles.metricLabel}>Highest Recorded Price (₹/kg)</p>
                <p className={styles.metricValue}>{analysis.highestPrice.toFixed(2)}</p>
            </div>
        </div>
        
        <p className={styles.trendIndicator}>Price Trend (30 Days): <span className={trendClass}>{analysis.priceTrend.toFixed(1)}%</span></p>

        <h3 className={styles.sectionTitle}>Price Trend (30 Days)</h3>
        {/* Placeholder for a chart (d3, recharts, or simple SVG) */}
        <div className={styles.chartPlaceholder}>
            [Detailed Price Trend Chart for {filters.product}]
        </div>
      </div>
    </div>
  );
};

export default PriceAnalysis;

### `src/pages/Farmer/PriceAnalysis.module.css`
```css
.container {
  max-width: 700px;
  margin: 30px auto;
  padding: 30px;
}

.logo {
  color: #388e3c;
  text-align: center;
  margin-bottom: 15px;
}

.title {
  font-size: 24px;
}

.subtitle {
  font-size: 14px;
  color: #666;
  margin-bottom: 30px;
}

.analysisCard {
    background: white;
    padding: 25px;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
}

.sectionTitle {
  color: #333;
  font-size: 18px;
  border-bottom: 1px solid #eee;
  padding-bottom: 5px;
  margin: 0 0 15px 0;
}

.filters {
    display: flex;
    gap: 15px;
    align-items: flex-end;
    margin-bottom: 30px;
}

.filterGroup {
    flex: 1;
}

.label {
  display: block;
  font-size: 14px;
  color: #333;
  margin-bottom: 5px;
  font-weight: 500;
}

.selectInput {
    width: 100%;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
}

.applyButton {
    padding: 10px 20px;
    background-color: #388e3c;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-weight: bold;
}

.metrics {
    display: flex;
    justify-content: space-around;
    text-align: center;
    margin-bottom: 30px;
}

.metricBox {
    background-color: #f7f7f7;
    padding: 15px;
    border-radius: 6px;
    width: 30%;
}

.metricLabel {
    font-size: 12px;
    color: #666;
    margin-bottom: 5px;
}

.metricValue {
    font-size: 24px;
    font-weight: bold;
    color: #333;
}

.trendIndicator {
    text-align: center;
    font-size: 14px;
    margin-bottom: 20px;
    font-weight: 500;
}

.trendDown {
    color: #dc3545; /* Red for negative trend */
    font-weight: bold;
}

.trendUp {
    color: #388e3c; /* Green for positive trend */
    font-weight: bold;
}

.chartPlaceholder {
    height: 300px;
    background-color: #f0f4f7;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #999;
    border-radius: 4px;
}


---

## 4. Vendor Portal Pages (P7, P9, P10, P13, P16)

### `src/pages/Vendor/VendorDashboard.js` (P7)
```javascript
import React, { useState, useEffect } from 'react';
import { useAuth } from '../../context/AuthContext';
import { useNavigate } from 'react-router-dom';
import styles from './VendorDashboard.module.css'; // New CSS file

const VendorDashboard = () => {
    const { userInfo, logout } = useAuth();
    const navigate = useNavigate();
    
    const [stats, setStats] = useState({ 
        totalOrders: 1247, 
        totalSpent: 45890, 
        activeSuppliers: 23,
        pendingOrders: 8
    });
    const [featured, setFeatured] = useState([
        { name: "Organic Tomatoes", price: "10/kg" },
        { name: "Premium Wheat", price: "25/kg" },
        { name: "Fresh Apples", price: "100/kg" },
    ]);

    useEffect(() => {
        // Simulating data fetch
        console.log('Vendor Dashboard data loaded.');
    }, []);

    const handleQuickAction = (path) => navigate(path);

    return (
        <div className={styles.container}>
            <h1 className={styles.logo}>SmartMandi</h1>
            <h2 className={styles.title}>Vendor Portal</h2>
            
            <div className={styles.headerInfo}>
                <div className={styles.userInfo}>
                    <span>Welcome, {userInfo?.name || 'Vishw Vora'}!</span>
                    <button className={styles.logoutButton} onClick={logout}>Logout</button>
                </div>
            </div>

            <div className={styles.statsCards}>
                <div className={styles.card}>
                    <div className={styles.statValue}>{stats.totalOrders}</div>
                    <div className={styles.statLabel}>Total Orders</div>
                </div>
                <div className={styles.card}>
                    <div className={styles.statValue}>₹{stats.totalSpent.toLocaleString()}</div>
                    <div className={styles.statLabel}>Total Spent</div>
                </div>
                <div className={styles.card}>
                    <div className={styles.statValue}>{stats.activeSuppliers}</div>
                    <div className={styles.statLabel}>Active Suppliers</div>
                </div>
                <div className={styles.card}>
                    <div className={styles.statValue}>{stats.pendingOrders}</div>
                    <div className={styles.statLabel}>Pending Orders</div>
                </div>
            </div>
            
            <div className={styles.contentGrid}>
                <div className={styles.featuredSection}>
                    <h2 className={styles.sectionHeader}>Featured Products</h2>
                    <p className={styles.subtitle}>Manage your agricultural product purchases</p>
                    
                    {featured.map((item, index) => (
                        <div key={index} className={styles.productItem}>
                            <h4>{item.name}</h4>
                            <p className={styles.price}>{item.price}</p>
                        </div>
                    ))}
                    <button className={styles.viewAllButton} onClick={() => navigate('/vendor/browse')}>View All</button>
                </div>

                <div className={styles.sidebar}>
                    <h2 className={styles.sectionHeader}>Quick Actions</h2>
                    <div className={styles.quickActions}>
                        <button onClick={() => handleQuickAction('/vendor/browse')}>P New Order</button>
                        <button onClick={() => handleQuickAction('/vendor/suppliers')}>Q Find Suppliers</button>
                    </div>

                    <h2 className={styles.sectionHeader}>Recent Orders</h2>
                    <p className={styles.recentOrder}>Order #1234 - Delivered</p>
                    <p className={styles.recentOrder}>Order #1235 - In Transit</p>
                    <p className={styles.recentOrder}>Order #1236 - Processing</p>
                </div>
            </div>
        </div>
    );
};

export default VendorDashboard;

### `src/pages/Vendor/VendorDashboard.module.css`
```css
.container {
  max-width: 1200px;
  margin: 30px auto;
  padding: 30px;
  background: white;
  border-radius: 8px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.logo {
  color: #388e3c;
  text-align: center;
  margin-bottom: 10px;
}

.title {
    font-size: 24px;
    text-align: center;
    margin-bottom: 20px;
    font-weight: normal;
}

.headerInfo {
    display: flex;
    justify-content: flex-end;
    align-items: center;
    margin-bottom: 20px;
    border-bottom: 1px solid #eee;
    padding-bottom: 15px;
}

.userInfo {
    display: flex;
    align-items: center;
    font-weight: bold;
    font-size: 14px;
}

.logoutButton {
    background: #f44336;
    color: white;
    border: none;
    padding: 8px 15px;
    border-radius: 4px;
    cursor: pointer;
    margin-left: 15px;
}

.statsCards {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 20px;
    margin-bottom: 30px;
}

.card {
    background-color: #e8f5e9; /* Light green background */
    padding: 20px;
    border-radius: 6px;
    text-align: left;
    border-left: 5px solid #388e3c;
}

.statValue {
    font-size: 30px;
    font-weight: bold;
    color: #388e3c;
}

.statLabel {
    font-size: 14px;
    color: #555;
    margin-top: 5px;
}

.contentGrid {
    display: grid;
    grid-template-columns: 2fr 1fr;
    gap: 30px;
}

.sectionHeader {
    color: #333;
    font-size: 18px;
    border-bottom: 1px solid #eee;
    padding-bottom: 5px;
    margin: 20px 0 15px 0;
}

.subtitle {
    font-size: 14px;
    color: #666;
    margin-bottom: 20px;
}

.productItem {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px;
    border-bottom: 1px dashed #eee;
}

.productItem h4 {
    margin: 0;
    font-size: 16px;
}

.price {
    font-weight: bold;
    color: #1976d2;
}

.viewAllButton {
    background: none;
    border: 1px solid #1976d2;
    color: #1976d2;
    padding: 8px 15px;
    border-radius: 4px;
    cursor: pointer;
    margin-top: 15px;
}

.quickActions button {
    width: 100%;
    background-color: #ff9800;
    color: white;
    border: none;
    padding: 15px;
    border-radius: 6px;
    cursor: pointer;
    font-size: 16px;
    font-weight: bold;
    margin-bottom: 10px;
}

.recentOrder {
    font-size: 14px;
    padding: 8px 0;
    border-bottom: 1px dashed #eee;
}


### `src/pages/Vendor/BrowseProducts.js` (P9)
```javascript
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import styles from './BrowseProducts.module.css';

const ProductCard = ({ product, handleViewDetails }) => (
    <div className={styles.productCard} onClick={() => handleViewDetails(product.id)}>
        <div className={`${styles.statusTag} ${styles[product.status.replace(/\s/g, '')]}`}>{product.status}</div>
        
        <div className={styles.cardDetails}>
            <h4>{product.name}</h4>
            <p className={styles.description}>{product.description}</p>
            <p className={styles.farmerId}>Farmer ID: {product.farmerId}</p>
            <div className={styles.pricing}>
                <span className={styles.price}>{product.price}</span>
                <span className={styles.qty}>Qty: {product.qty}</span>
            </div>
            <button className={styles.addButton} onClick={(e) => {e.stopPropagation(); alert('Added to order!');}}>Add to Order</button>
        </div>
    </div>
);

const BrowseProducts = () => {
    const navigate = useNavigate();
    const [products, setProducts] = useState([]);
    const [filters, setFilters] = useState({ search: '', category: 'All', sort: 'Price: Low to High' });

    useEffect(() => {
        // Simulate data fetch based on filters
        setProducts([
            { id: 101, name: "Premium Wheat", description: "High-protein milling wheat, Grade A", farmerId: "FM401", qty: "+500 Quintals", price: "₹2,200/Quintal", status: "Available" },
            { id: 102, name: "Organic Tomatoes", description: "Naturally ripened, ideal for sauces and processing.", farmerId: "FM289", qty: "800 kg", price: "₹35/kg", status: "LimitedStock" },
            { id: 103, name: "Fresh Apples", description: "Crisp texture, sweet flavor, stored in cold storage", farmerId: "FM510", qty: "10 Tons", price: "₹120/Dozen", status: "Available" },
            { id: 104, name: "Organic Potatoes", description: "High quality", farmerId: "FM777", qty: "250 kg", price: "₹50/kg", status: "Available" },
        ]);
        console.log('Fetching products with filters:', filters);
    }, [filters]);

    const handleChange = (e) => {
        setFilters({...filters, [e.target.name]: e.target.value});
    };

    const handleViewDetails = (productId) => {
        navigate(`/vendor/product/${productId}`);
    };

    return (
        <div className={styles.container}>
            <h1 className={styles.logo}>SmartMandi</h1>
            <h2 className={styles.title}>Browse Available Produce</h2>
            <p className={styles.subtitle}>Search and filter high-quality produce listed by our verified farmers.</p>

            <div className={styles.controls}>
                <input 
                    type="text" 
                    name="search"
                    placeholder="Q Search products by name or farmer...." 
                    className={styles.searchBar} 
                    value={filters.search}
                    onChange={handleChange}
                />
                <select name="category" value={filters.category} onChange={handleChange} className={styles.filterSelect}>
                    <option value="All">All Categories</option>
                    <option value="Vegetables">Vegetables</option>
                    <option value="Fruits">Fruits</option>
                </select>
                <select name="sort" value={filters.sort} onChange={handleChange} className={styles.filterSelect}>
                    <option>Price: Low to High</option>
                    <option>Price: High to Low</option>
                </select>
                <button className={styles.applyButton}>Apply Filters</button>
            </div>

            <div className={styles.productList}>
                {products.map((p) => <ProductCard key={p.id} product={p} handleViewDetails={handleViewDetails} />)}
            </div>
        </div>
    );
};

export default BrowseProducts;

### `src/pages/Vendor/BrowseProducts.module.css`
```css
.container {
  max-width: 900px;
  margin: 30px auto;
  padding: 30px;
}

.logo {
  color: #388e3c;
  text-align: center;
  margin-bottom: 15px;
}

.title {
  font-size: 24px;
}

.subtitle {
  font-size: 14px;
  color: #666;
  margin-bottom: 20px;
}

.controls {
    display: flex;
    gap: 10px;
    margin-bottom: 30px;
}

.searchBar {
    flex-grow: 1;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
}

.filterSelect {
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
}

.applyButton {
    background-color: #388e3c;
    color: white;
    border: none;
    padding: 10px 15px;
    border-radius: 4px;
    cursor: pointer;
}

.productList {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: 20px;
}

.productCard {
    background: white;
    border: 1px solid #eee;
    border-radius: 8px;
    overflow: hidden;
    position: relative;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    cursor: pointer;
    transition: box-shadow 0.2s;
}

.productCard:hover {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.statusTag {
    position: absolute;
    top: 10px;
    right: 10px;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 12px;
    font-weight: bold;
    color: white;
}

/* Specific Status Colors */
.Available {
    background-color: #4CAF50; 
}
.LimitedStock {
    background-color: #ffc107;
}

.cardDetails {
    padding: 15px;
}

.cardDetails h4 {
    margin: 0 0 5px 0;
    font-size: 18px;
}

.description, .farmerId {
    font-size: 13px;
    color: #666;
    margin-bottom: 10px;
}

.pricing {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 10px;
}

.price {
    font-size: 16px;
    font-weight: bold;
    color: #333;
}

.qty {
    font-size: 12px;
    color: #999;
}

.addButton {
    width: 100%;
    padding: 10px;
    background-color: #388e3c;
    color: white;
    border: none;
    border-radius: 4px;
    margin-top: 15px;
    cursor: pointer;
}


### `src/pages/Vendor/ProductDetails.js` (P10)
```javascript
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import styles from './ProductDetails.module.css';

const ProductDetails = () => {
  const { productId } = useParams();
  const navigate = useNavigate();
  const [product, setProduct] = useState(null);
  const [quantity, setQuantity] = useState(10);
  
  useEffect(() => {
    // Simulate fetching product details based on productId
    setProduct({
        name: "Premium Wheat",
        price: 2200,
        unit: "Quintal (100 kg)",
        inventory: 500,
        moq: 10,
        description: "High-protein milling wheat, Grade A, sourced from the fertile lands of Rajasthan...",
        supplier: { name: "Vishw (FM401)", location: "Ahemadabad, Gujarat", listings: 15 }
    });
  }, [productId]);

  const estimatedCost = product ? (quantity * product.price).toLocaleString('en-IN') : '...';

  const handleOrder = (type) => {
    // Simulate order/basket addition
    console.log(`${type} initiated for ${quantity} units of ${product.name}`);
    alert(`${quantity} units of ${product.name} ${type === 'place' ? 'ordered' : 'added to basket'}!`);
  };

  if (!product) return <div className={styles.loading}>Loading product details...</div>;

  return (
    <div className={styles.container}>
      <h1 className={styles.logo}>SmartMandi</h1>
      <h2 className={styles.title}>Product Details</h2>
      <p className={styles.subtitle}>Review quality, Inventory, and pricing before placing an order.</p>

      <div className={styles.detailsCard}>
        <div className={styles.productHeader}>
            <h3>{product.name}</h3>
            <span className={styles.rating}>4.8 (120 reviews)</span>
        </div>
        
        <div className={styles.priceSection}>
            <span className={styles.price}>₹{product.price.toLocaleString('en-IN')}</span>
            <span className={styles.unit}>/ {product.unit}</span>
        </div>

        <div className={styles.inventory}>
            <strong>Inventory:</strong> {product.inventory} {product.unit}s available for immediate dispatch.
        </div>
        <div className={styles.moq}>
            <strong>Minimum Order Quantity (MOQ):</strong> {product.moq} {product.unit}s
        </div>

        <div className={styles.orderSection}>
            <label>Quantity (in Quintals)</label>
            <input 
                type="number" 
                min={product.moq}
                className={styles.quantityInput}
                value={quantity}
                onChange={(e) => setQuantity(Math.max(product.moq, parseInt(e.target.value) || 0))}
            />
            <span className={styles.estimatedCost}>Estimated Cost: ₹ {estimatedCost}</span>
            <button className={styles.placeOrderButton} onClick={() => handleOrder('place')}>Place Your Order</button>
            <button className={styles.addToBasketButton} onClick={() => handleOrder('basket')}>Add to Order Basket</button>
        </div>

        <h3 className={styles.sectionTitle}>Product Description</h3>
        <p className={styles.description}>
            {product.description}
        </p>

        <h3 className={styles.sectionTitle}>Supplied By</h3>
        <div className={styles.supplierDetails}>
            <p><strong>{product.supplier.name}</strong></p>
            <p>Location: {product.supplier.location}</p>
            <p>Products Listed: {product.supplier.listings}</p>
            <button className={styles.supplierProfileButton} onClick={() => alert('Viewing supplier profile...')}>View Supplier Profile</button>
            <button className={styles.contactButton} onClick={() => alert('Opening contact form...')}>Contact Supplier</button>
        </div>

        <button className={styles.backButton} onClick={() => navigate('/vendor/browse')}>← Back to Browsing</button>
      </div>
    </div>
  );
};

export default ProductDetails;

### `src/pages/Vendor/ProductDetails.module.css`
```css
.container {
  max-width: 600px;
  margin: 30px auto;
  padding: 30px;
}

.logo {
  color: #388e3c;
  text-align: center;
  margin-bottom: 15px;
}

.title {
  font-size: 24px;
}

.subtitle {
  font-size: 14px;
  color: #666;
  margin-bottom: 20px;
}

.detailsCard {
    background: white;
    padding: 25px;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
}

.productHeader {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
}

.productHeader h3 {
    margin: 0;
    color: #333;
}

.rating {
    background-color: #f0f0f0;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 12px;
}

.priceSection {
    margin-bottom: 20px;
}

.price {
    font-size: 28px;
    font-weight: bold;
    color: #388e3c;
}

.unit {
    font-size: 14px;
    color: #666;
}

.inventory, .moq {
    font-size: 14px;
    margin-bottom: 8px;
}

.orderSection {
    background-color: #f9f9f9;
    padding: 15px;
    border-radius: 6px;
    margin: 20px 0;
}

.quantityInput {
    width: 100px;
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 4px;
    margin-right: 15px;
}

.estimatedCost {
    font-weight: bold;
    color: #1976d2;
    display: block;
    margin: 10px 0;
}

.placeOrderButton {
    background-color: #388e3c;
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 4px;
    cursor: pointer;
    font-weight: bold;
    margin-right: 10px;
}

.addToBasketButton {
    background-color: #ff9800;
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 4px;
    cursor: pointer;
}

.sectionTitle {
    color: #333;
    font-size: 16px;
    border-bottom: 1px solid #eee;
    padding-bottom: 5px;
    margin: 25px 0 10px 0;
}

.description {
    font-size: 14px;
    color: #555;
    line-height: 1.5;
}

.supplierDetails p {
    margin: 3px 0;
    font-size: 14px;
}

.supplierProfileButton, .contactButton {
    margin-top: 10px;
    padding: 8px 15px;
    border: 1px solid #1976d2;
    background: none;
    color: #1976d2;
    border-radius: 4px;
    cursor: pointer;
    margin-right: 10px;
}

.backButton {
    background: #f0f0f0;
    border: none;
    padding: 10px 15px;
    border-radius: 4px;
    margin-top: 25px;
    cursor: pointer;
}


### `src/pages/Vendor/VendorOrders.js` (P13)
*(Code provided in previous response)*
```javascript
import React, { useState, useEffect, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import styles from './VendorOrders.module.css';

const VendorOrders = () => {
    const navigate = useNavigate();
    const [orders, setOrders] = useState([]);
    
    // Simulate fetching order data
    useEffect(() => {
        setOrders([
            { id: 1237, date: "Oct 21, 2025", total: "₹98,000", supplier: "Sanket", status: "Accepted by Farmer", payment: "Payment Required" },
            { id: 1236, date: "Oct 18, 2025", total: "₹43,200", supplier: "Vishw", status: "In Transit", payment: "Paid" },
            { id: 1235, date: "Oct 15, 2025", total: "₹28,900", supplier: "Shreedatta", status: "Delivered", payment: "Paid" },
            { id: 1238, date: "Oct 21, 2025", total: "₹1,50,000", supplier: "Xvz", status: "Awaiting Acceptance", payment: "Pending" },
            { id: 1239, date: "Oct 20, 2025", total: "₹5,000", supplier: "Test", status: "Rejected by Farmer", payment: "Cancelled" },
        ]);
    }, []);

    const handleAction = useCallback((orderId, paymentStatus) => {
        if (paymentStatus === 'Payment Required') {
            alert(`Initiating payment for Order ${orderId}.`);
            // In a real app: navigate('/vendor/checkout/' + orderId)
        } else {
            alert(`Viewing details for Order ${orderId}.`);
            // In a real app: navigate('/vendor/orders/' + orderId)
        }
    }, []);

    const getStatusClass = (status) => {
        const statusMap = {
            'Payment Required': 'paymentRequired',
            'Accepted by Farmer': 'accepted',
            'In Transit': 'transit',
            'Delivered': 'delivered',
            'Awaiting Acceptance': 'awaiting',
            'Rejected by Farmer': 'rejected',
        };
        return styles[statusMap[status] || 'default'];
    };
    
    const getActionText = (status) => {
        return status === 'Payment Required' ? 'Pay Now' : 'View Details';
    }

    return (
        <div className={styles.container}>
            <h1 className={styles.logo}>SmartMandi</h1>
            <h2 className={styles.title}>My Purchase Orders</h2>
            <p className={styles.subtitle}>Track the status, payment, and delivery of all orders placed with SmartMandi farmers.</p>

            <div className={styles.statsBar}>
                <div className={styles.statBox}>
                    <div className={styles.statValue}>2</div>
                    <div className={styles.statLabel}>Payments Due (Immediate Action)</div>
                </div>
                <div className={styles.statBox}>
                    <div className={styles.statValue}>4</div>
                    <div className={styles.statLabel}>Orders In Transit</div>
                </div>
                <div className={styles.statBox}>
                    <div className={styles.statValue}>18</div>
                    <div className={styles.statLabel}>Total Delivered Orders</div>
                </div>
            </div>

            <h3 className={styles.listHeader}>All Purchase Orders (24 Total)</h3>
            
            <div className={styles.filterBar}>
                <button className={styles.filterButton}>Filter by Date</button>
                <span className={styles.showingText}>Showing 1 to 24 of 24 Purchase Orders.</span>
            </div>

            <div className={styles.tableContainer}>
                <table className={styles.ordersTable}>
                    <thead>
                        <tr>
                            <th>Order ID</th><th>Date Placed</th><th>Total Amount</th><th>Supplier</th>
                            <th>Order Status</th><th>Payment Status</th><th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        {orders.map(order => (
                            <tr key={order.id}>
                                <td>{order.id}</td><td>{order.date}</td><td>{order.total}</td>
                                <td>{order.supplier}</td>
                                <td><span className={getStatusClass(order.status)}>{order.status}</span></td>
                                <td>{order.payment}</td>
                                <td><button className={styles.viewButton} onClick={() => handleAction(order.id, order.payment)}>{getActionText(order.payment)}</button></td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>
        </div>
    );
};

export default VendorOrders;

### `src/pages/Vendor/VendorOrders.module.css`
```css
.container {
  max-width: 1000px;
  margin: 30px auto;
  padding: 30px;
}

.logo {
  color: #388e3c;
  text-align: center;
  margin-bottom: 15px;
}

.title {
  font-size: 24px;
  margin-bottom: 5px;
}

.subtitle {
  font-size: 14px;
  color: #666;
  margin-bottom: 30px;
}

.statsBar {
    display: flex;
    justify-content: space-between;
    background-color: #f0f4f7;
    padding: 15px;
    border-radius: 6px;
    margin-bottom: 30px;
}

.statBox {
    text-align: center;
    padding: 0 15px;
}

.statValue {
    font-size: 24px;
    font-weight: bold;
    color: #388e3c;
}

.statLabel {
    font-size: 12px;
    color: #555;
}

.listHeader {
    font-size: 18px;
    margin-bottom: 15px;
}

.filterBar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
}

.filterButton {
    background-color: #eee;
    border: 1px solid #ccc;
    padding: 8px 15px;
    border-radius: 4px;
    cursor: pointer;
}

.showingText {
    font-size: 13px;
    color: #666;
}

.tableContainer {
    overflow-x: auto;
    background: white;
    border-radius: 6px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
}

.ordersTable {
    width: 100%;
    border-collapse: collapse;
}

.ordersTable th, .ordersTable td {
    padding: 12px;
    text-align: left;
    border-bottom: 1px solid #eee;
    font-size: 14px;
}

.ordersTable th {
    background-color: #f7f7f7;
    font-weight: bold;
    color: #333;
}

.ordersTable tr:last-child td {
    border-bottom: none;
}

.viewButton {
    background: none;
    border: 1px solid #1976d2;
    color: #1976d2;
    padding: 5px 10px;
    border-radius: 4px;
    cursor: pointer;
}

/* Status Styling */
.paymentRequired {
    background-color: #ff9800;
    color: white;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 12px;
}
.delivered {
    background-color: #4CAF50;
    color: white;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 12px;
}
.transit {
    background-color: #2196f3;
    color: white;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 12px;
}
.accepted {
    background-color: #a1d063;
    color: #333;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 12px;
}
.awaiting {
    background-color: #ffeb3b;
    color: #333;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 12px;
}
.rejected {
    background-color: #f44336;
    color: white;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 12px;
}


### `src/pages/Vendor/VendorSettingsProfile.js` (P16)
```javascript
import React, { useState } from 'react';
import { useAuth } from '../../context/AuthContext';
import styles from '../Farmer/SettingsProfile.module.css'; // Reusing farmer settings profile styles

const VendorSettingsProfile = () => {
  const { userInfo } = useAuth();
  const [profileData, setProfileData] = useState({
    fullName: userInfo?.name || 'Vishw Vora',
    email: userInfo?.email || 'vvishw@example.com',
    phoneNumber: '+91 1234567890',
    city: 'Dharwad',
    stateDistrict: 'Karnatak',
    pincode: '111111',
    landmark: 'IIT',
  });

  const handleChange = (e) => {
    setProfileData({ ...profileData, [e.target.name]: e.target.value });
  };

  const handleSave = (e) => {
    e.preventDefault();
    // Simulate API call to save profile changes
    console.log('Vendor saving profile:', profileData);
    alert('Vendor profile changes saved successfully!');
  };

  const handleReset = () => {
    // Reload initial data or reset form
    setProfileData({
        fullName: 'Vishw Vora', email: 'vvishw@example.com', phoneNumber: '+91 1234567890',
        city: 'Dharwad', stateDistrict: 'Karnatak', pincode: '111111', landmark: 'IIT',
    });
  };

  return (
    <div className={styles.container}>
      <h1 className={styles.logo}>SmartMandi</h1>
      <h2 className={styles.title}>Edit Profile & Address</h2>
      <p className={styles.subtitle}>Update your contact and primary location details.</p>

      <form className={styles.form} onSubmit={handleSave}>
        <h3 className={styles.sectionTitle}>Personal & Contact Details</h3>
        <label className={styles.label}>Full Name</label>
        <input type="text" name="fullName" value={profileData.fullName} onChange={handleChange} />

        <label className={styles.label}>Email Address*</label>
        <input type="email" name="email" value={profileData.email} onChange={handleChange} required />
        
        <label className={styles.label}>Phone Number *</label>
        <input type="tel" name="phoneNumber" value={profileData.phoneNumber} onChange={handleChange} required />

        <h3 className={styles.sectionTitle}>Primary Address</h3>
        <div className={styles.row}>
            <div className={styles.inputGroup}>
                <label className={styles.label}>City</label>
                <input type="text" name="city" value={profileData.city} onChange={handleChange} />
            </div>
            <div className={styles.inputGroup}>
                <label className={styles.label}>State/District</label>
                <input type="text" name="stateDistrict" value={profileData.stateDistrict} onChange={handleChange} />
            </div>
        </div>

        <label className={styles.label}>Pincode</label>
        <input type="text" name="pincode" value={profileData.pincode} onChange={handleChange} />
        
        <label className={styles.label}>Landmark (Optional)</label>
        <input type="text" name="landmark" value={profileData.landmark} onChange={handleChange} />

        <div className={styles.buttonActions}>
            <button type="button" className={styles.resetButton} onClick={handleReset}>Reset Form</button>
            <button type="submit" className={styles.saveButton}>Save Profile Changes</button>
        </div>
      </form>
    </div>
  );
};

export default VendorSettingsProfile;
